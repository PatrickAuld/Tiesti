FORMAT: 1A
HOST: http://localhost/rest/v1/

# Tiesti
API for managing name/value configurations.

# Group Notes
TODO

## Configurations Collection [/configs]
### List all Configurations [GET]
+ Response 200 (application/json)

        [{
          "id": "1"
        }, {
          "id": "2"
        }]

### Create a Configuration [POST]
+ Request (application/json)

        { 
            "properties": {
                "poop" : {
                    "value" : "hehe",
                    "root" : "const"
                },
                "cookie" : {
                    "value" : "monster",
                    "root" : "const"
                },
                "coco" : {
                    "value" : "nut",
                    "root" : "var"
                }
            }
        }

+ Response 201 (application/json)
+ Header
    Location : $HOST/configs/1234

## Configuration [/configs/{id}]
A single configuration object with all its details

+ Parameters
    + id (required, string, `1`) ... String identifier for the configuration.

### Retrieve a Configuration [GET]
+ Parameters 
    + expandVars (optional, boolean, 'false') ... When set to true information on variables is included in the response.
+ Response 200 (application/json)
    + Body

            {
                "id" : "id",
                "properties": {
                    "poop" : {
                        "value" : "hehe",
                        "root" : "const"
                    },
                    "cookie" : {
                        "value" : "monster",
                        "root" : "const"
                    },
                    "coco" : {
                        "value" : "nut",
                        "root" : "var",
                        "variable" : {
                            "id" : "1",
                            "label" : "Drink or dessert?"
                        }
                    }
                }
            }

### Remove a Configuration [DELETE]
+ Response 204

## Variables [/vars]

### List all Variables [GET]
Lists all of the available variables
+ Response 200 (application/json)

        [
            {
                "id" : "123",
                "label" : "dbPassword",
                "value" : "password123"
            },
            {
                "id" : "456",
                "label" : "dbUsername",
                "value" : "admin"
            }
        ]

### Create a new Variable [POST]
Creates a new variable.
+ Request (application/json)

            {
                "label" : "secretCodeWord",
                "value" : "pickles"
            }

+ Response 201 (application/json)
+ Header
        Location : $HOST/vars/678

## Services [/services]
Services are enties that configs can be associated with.

### List all services [GET]
+ Response 200 (application/json)
        [
            {
                "id" : "xyz",
                "label" : "Secret Service",
                "description" : "Redacted",
                "versions" : [ "1", "2" ]
            },
            {
                "id" : "abc",
                "label" : "Table Service",
                "decription" : "Overpriced DIY drinking"
                "versions" : [ "1" ]
            }
        ]

### Create a new Service [POST]
+ Request (application/json)

            {
                "label" : "Waste Removal Service",
                "decription" : "A stinky job"
            }

+ Response 201 (application/json)
+ Header
        location : $HOST/service/678

## Service [/services/{id}]
A single service.
### Get info on a service [GET]
+ Response 200 (application/json)
        {
            "id" : "xyz",
            "label" : "Secret Service",
            "description" : "Redacted",
            "versions" : [ "1" , "2" ]
        }

### Update info for a service [PUT]
+ Request (application/json)
        {
            "label" : "Secret Service",
            "description" : "==============",
        }
+ Response 204 (application/json)

## Service Versions [/services/{id}/versions]
### List all Versions [GET]
+ Response 200 (application/json)
        [
            {
                "id" : "123",
                "label" : "Bush (2 terms)",
                "configurationId" : "1"
            },
            {
                "id" : "234",
                "label" : "Obama (1st term)",
                "configurationId" : "2"
            }
        ]

### Create a new version of the service [POST]
+ Request (application/json)
        { "label" : "Obama (2nd term)" }

+ Response 201 (application/json)
+ Header
    Location $HOST/service/xyz/version/345

## A single service version [/services/{serviceId}/version/{versionId}]
### Get a version Id [GET]
+ Response 200 (application/json)
        {
            "id" : "123",
            "label" : "Obama (2nd term)",
            "configurationId" : "3"
        }